// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190730.2

#ifndef WINRT_Windows_Devices_Lights_0_H
#define WINRT_Windows_Devices_Lights_0_H
namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    template <typename TSender, typename TResult> struct TypedEventHandler;
}
namespace winrt::Windows::UI
{
    struct Color;
}
namespace winrt::Windows::Devices::Lights
{
    struct ILamp;
    struct ILampAvailabilityChangedEventArgs;
    struct ILampStatics;
    struct Lamp;
    struct LampAvailabilityChangedEventArgs;
}
namespace winrt::impl
{
    template <> struct category<Windows::Devices::Lights::ILamp>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Devices::Lights::ILampAvailabilityChangedEventArgs>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Devices::Lights::ILampStatics>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Devices::Lights::Lamp>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Devices::Lights::LampAvailabilityChangedEventArgs>
    {
        using type = class_category;
    };
    template <> struct name<Windows::Devices::Lights::ILamp>
    {
        static constexpr auto & value{ L"Windows.Devices.Lights.ILamp" };
    };
    template <> struct name<Windows::Devices::Lights::ILampAvailabilityChangedEventArgs>
    {
        static constexpr auto & value{ L"Windows.Devices.Lights.ILampAvailabilityChangedEventArgs" };
    };
    template <> struct name<Windows::Devices::Lights::ILampStatics>
    {
        static constexpr auto & value{ L"Windows.Devices.Lights.ILampStatics" };
    };
    template <> struct name<Windows::Devices::Lights::Lamp>
    {
        static constexpr auto & value{ L"Windows.Devices.Lights.Lamp" };
    };
    template <> struct name<Windows::Devices::Lights::LampAvailabilityChangedEventArgs>
    {
        static constexpr auto & value{ L"Windows.Devices.Lights.LampAvailabilityChangedEventArgs" };
    };
    template <> struct guid_storage<Windows::Devices::Lights::ILamp>
    {
        static constexpr guid value{ 0x047D5B9A,0xEA45,0x4B2B,{ 0xB1,0xA2,0x14,0xDF,0xF0,0x0B,0xDE,0x7B } };
    };
    template <> struct guid_storage<Windows::Devices::Lights::ILampAvailabilityChangedEventArgs>
    {
        static constexpr guid value{ 0x4F6E3DED,0x07A2,0x499D,{ 0x92,0x60,0x67,0xE3,0x04,0x53,0x2B,0xA4 } };
    };
    template <> struct guid_storage<Windows::Devices::Lights::ILampStatics>
    {
        static constexpr guid value{ 0xA822416C,0x8885,0x401E,{ 0xB8,0x21,0x8E,0x8B,0x38,0xA8,0xE8,0xEC } };
    };
    template <> struct default_interface<Windows::Devices::Lights::Lamp>
    {
        using type = Windows::Devices::Lights::ILamp;
    };
    template <> struct default_interface<Windows::Devices::Lights::LampAvailabilityChangedEventArgs>
    {
        using type = Windows::Devices::Lights::ILampAvailabilityChangedEventArgs;
    };
    template <> struct abi<Windows::Devices::Lights::ILamp>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_BrightnessLevel(float*) noexcept = 0;
            virtual int32_t __stdcall put_BrightnessLevel(float) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSettable(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall add_AvailabilityChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AvailabilityChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Devices::Lights::ILampAvailabilityChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsAvailable(bool*) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Devices::Lights::ILampStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDeviceSelector(void**) noexcept = 0;
            virtual int32_t __stdcall FromIdAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetDefaultAsync(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Windows_Devices_Lights_ILamp
    {
        [[nodiscard]] auto DeviceId() const;
        [[nodiscard]] auto IsEnabled() const;
        auto IsEnabled(bool value) const;
        [[nodiscard]] auto BrightnessLevel() const;
        auto BrightnessLevel(float value) const;
        [[nodiscard]] auto IsColorSettable() const;
        [[nodiscard]] auto Color() const;
        auto Color(Windows::UI::Color const& value) const;
        auto AvailabilityChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Lights::Lamp, Windows::Devices::Lights::LampAvailabilityChangedEventArgs> const& handler) const;
        using AvailabilityChanged_revoker = impl::event_revoker<Windows::Devices::Lights::ILamp, &impl::abi_t<Windows::Devices::Lights::ILamp>::remove_AvailabilityChanged>;
        [[nodiscard]] AvailabilityChanged_revoker AvailabilityChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::Devices::Lights::Lamp, Windows::Devices::Lights::LampAvailabilityChangedEventArgs> const& handler) const;
        auto AvailabilityChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Windows::Devices::Lights::ILamp>
    {
        template <typename D> using type = consume_Windows_Devices_Lights_ILamp<D>;
    };
    template <typename D>
    struct consume_Windows_Devices_Lights_ILampAvailabilityChangedEventArgs
    {
        [[nodiscard]] auto IsAvailable() const;
    };
    template <> struct consume<Windows::Devices::Lights::ILampAvailabilityChangedEventArgs>
    {
        template <typename D> using type = consume_Windows_Devices_Lights_ILampAvailabilityChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Windows_Devices_Lights_ILampStatics
    {
        auto GetDeviceSelector() const;
        auto FromIdAsync(param::hstring const& deviceId) const;
        auto GetDefaultAsync() const;
    };
    template <> struct consume<Windows::Devices::Lights::ILampStatics>
    {
        template <typename D> using type = consume_Windows_Devices_Lights_ILampStatics<D>;
    };
}
#endif
